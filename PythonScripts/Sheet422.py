# -*- coding: utf-8 -*-
"""
Created on Sun May 21 19:21:45 2017

@author: ubuntu
"""

import numpy as np
import matplotlib.pyplot as plt
from matplotlib import rcParams
rcParams.update({'figure.autolayout': True})
rcParams['figure.figsize'] = 7,6

#size = np.multiply(np.arange(1,11), np.power(2, 27))
tArray = np.array((32, 256, 512, 1024))
bArray = np.array((1,2,4,8))
cArray = np.array((256, 1024, 4096, 16384, 65536))
xaxis = cArray
#xaxis = (np.arange(32) +1 )* 32
#xaxis = np.power(2, np.arange(11))

#measuring results
#resultsd2hunified= np.array(((42.0468,21.0862,14.0966,10.6007,8.53908,7.15212,6.13771,5.35744,4.80669,4.35236,3.97191,3.6456,3.39006,3.15665,2.95694,2.77213,2.62678,2.49054,2.36475,2.24695,2.157,2.06565,1.98658,1.90318,1.84874,1.78628,1.72601,1.66145,1.62614,1.57729,1.53398,1.48152),(21.0883,10.5728,7.11558,5.32338,4.30665,3.62923,3.12605,2.73491,2.46135,2.22667,2.03319,1.87008,1.7465,1.62551,1.53075,1.43409,1.37455,1.30952,1.25266,1.19536,1.15847,1.11601,1.08035,1.0392,1.01555,0.980526,0.950575,0.919839,0.901532,0.87627,0.855656,0.828594),(14.0892,7.11036,4.74588,3.60701,2.91815,2.45158,2.1135,1.86185,1.67405,1.51691,1.39174,1.28797,1.21333,1.14255,1.07946,1.02149,0.978968,0.932346,0.891365,0.852514,0.828545,0.797285,0.771548,0.744572,0.73223,0.712422,0.692633,0.670884,0.65859,0.641241,0.625269,0.609007),(10.5802,5.31883,3.59741,2.71311,2.20938,1.86096,1.60617,1.41093,1.28475,1.17574,1.08562,1.00965,0.952264,0.893734,0.843507,0.799963,0.770293,0.73701,0.70941,0.683883,0.664016,0.63987,0.61824,0.597763,0.586372,0.569921,0.553578,0.53741,0.529855,0.516517,0.503108,0.469825)))


###########TODO 
#resultsh2dunified = np.array(((42.0506,21.0859,14.0977,10.6014,8.53246,7.14858,6.1336,5.35601,4.80231,4.3495,3.97016,3.64763,3.39462,3.15905,2.9595,2.77747,2.62916,2.49378,2.36778,2.2519,2.15784,2.06747,1.9887,1.90722,1.85041,1.78741,1.72702,1.66538,1.62816,1.57721,1.53363,1.48628),(21.0318,10.5737,7.11145,5.31906,4.30054,3.62079,3.12323,2.74068,2.464,2.22898,2.03305,1.87011,1.74381,1.62671,1.52915,1.43615,1.37585,1.31209,1.25409,1.20079,1.15853,1.11405,1.07511,1.03574,1.00927,0.978097,0.947257,0.92025,0.903101,0.879186,0.859407,0.834743),(14.0702,7.10753,4.74118,3.60728,2.91437,2.45552,2.11575,1.86376,1.6725,1.51784,1.39184,1.29052,1.21612,1.14104,1.07611,1.01701,0.974529,0.9302,0.89122,0.856223,0.831248,0.801768,0.773573,0.745422,0.729557,0.709002,0.688508,0.669497,0.658319,0.641678,0.625448,0.609671),(10.5662,5.31638,3.60067,2.7162,2.21142,1.85944,1.60437,1.41545,1.2864,1.17688,1.08398,1.00518,0.949749,0.894237,0.84889,0.802002,0.773029,0.738783,0.708354,0.67888,0.661314,0.639604,0.619332,0.597003,0.586632,0.570287,0.553147,0.539463,0.530637,0.516946,0.504556,0.480907)))

#resultsh2dunified = np.array(((27.7299,16.8099,12.7953,9.71136,8.15447,7.36201,6.71706,6.30663,5.92474,5.73942,5.47573,5.34291,5.16372,5.05228,4.94947,4.88315,4.80142,4.73021,4.65562,4.58154,4.53467,4.49067,4.45159,4.40729,4.38016,4.34874,4.31016,4.2565,4.23678,4.21371,4.20089,4.17431),(15.712,9.57024,7.35806,6.31578,5.6812,5.33574,5.06942,4.83868,4.68452,4.57453,4.4656,4.37136,4.31281,4.25967,4.2118,4.1547,4.1146,4.08381,4.05928,4.03125,4.00124,3.97586,3.9606,3.93657,3.91762,3.90697,4.19263,4.38573,4.37035,4.35417,4.34571,4.32338),(12.5899,7.87951,6.47778,5.82593,5.45073,5.21798,5.04363,4.91057,4.82356,4.74385,4.65987,4.60243,4.56259,4.51467,4.47736,4.44112,4.41967,4.39646,4.37785,4.3691,4.34749,4.29917,4.27366,4.25967,4.17805,4.12875,4.10472,4.09269,4.06762,4.02479,4.00222,3.97976),(10.1468,6.78956,5.8379,5.35588,5.09192,4.92732,4.78273,4.67991,4.60339,4.55782,4.10176,3.93615,3.90095,3.87738,3.85107,3.81776,3.79811,3.78606,3.73558,3.71918,3.70738,3.68763,3.67617,3.65479,3.6588,3.64589,3.64175,3.62978,3.62498,3.62223,3.61342,3.61542)))

#resultsd2hunified = np.array(((27.4427,16.8236,12.7415,10.2739,8.89178,7.88617,7.25899,6.7949,6.45912,6.21943,6.00907,5.82589,5.68535,5.58913,5.46642,5.37403,5.27113,5.22516,5.16263,5.11523,5.05342,5.00848,4.967,4.91938,4.89257,4.86409,4.84562,4.8054,4.78812,4.76841,4.72273,4.692),(16.4225,10.4789,7.86553,6.80683,6.22431,5.83598,5.56084,5.35564,5.20881,5.10242,4.98705,4.9088,4.85137,4.79202,4.74275,4.67872,4.63764,4.60028,4.56947,4.5375,4.51276,4.47654,4.46502,4.44567,4.4421,4.42853,4.41108,4.38533,4.36463,4.35223,4.34136,4.3321),(12.4166,7.87659,6.46751,5.83214,5.4549,5.21328,5.03327,4.90655,4.82403,4.73488,4.65318,4.59817,4.56007,4.51025,4.4757,4.44279,4.44013,4.4176,4.40224,4.36929,4.34087,4.29198,4.27286,4.25308,4.18865,4.12604,4.09472,4.0985,4.0771,4.02231,3.99223,3.97951),(10.0746,6.79117,5.84922,5.36458,5.09574,4.91857,4.77878,4.68733,4.61325,4.55795,4.50121,4.46023,4.41931,4.39007,4.3595,4.32837,4.26591,4.25548,4.10855,4.05533,4.07474,4.04706,4.01704,3.99084,4.01094,4.01691,3.99847,3.99005,3.99999,3.98518,3.97226,3.98275)))

#results = np.array((((1.20624,3.66272,13.6811,54.0583,205.446),(1.46742,4.53056,17.1257,66.6087,266.735),(2.3895,7.62496,29.5321,116.935,466.533),(3.77197,13.9861,54.69,218.149,721.186)),((1.13248,3.75974,13.9801,54.8562,203.929),(1.3575,4.52374,13.2606,66.6283,206.963),(2.14102,7.65062,29.5384,96.381,384.249),(3.76886,14.0244,54.6821,180.888,719.434)),((1.27558,3.87568,14.5686,57.1684,210.815),(1.36749,4.53706,17.0689,56.2333,223.048),(2.13635,7.62784,29.603,96.4623,384.516),(3.77293,13.9093,54.8036,180.462,722.508)),((1.24768,4.13578,15.2141,59.1129,229.927),(1.36694,4.51712,17.108,60.1771,240.551),(2.14301,7.60451,24.3384,96.5992,383.912),(3.7801,13.9558,45.4959,180.667,871.17))))
results = np.array((((1.21082,3.44586,13.5159,53.7796,206.99),(1.16941,3.61635,13.253,51.7458,205.689),(1.89997,6.3423,24.3939,96.666,385.078),(3.19267,11.5703,45.2916,180.814,722.897)),((1.17363,3.57971,13.0998,50.9991,204.526),(1.14291,3.57894,13.2326,51.9411,207.023),(1.86406,6.35686,24.4579,96.7037,385.76),(3.21901,11.8028,45.2805,180.547,722.15)),((1.17693,3.62179,13.5143,52.5353,210.505),(1.2576,3.86842,14.385,56.0389,223.158),(1.86214,6.41181,24.3564,96.5895,384.98),(3.22288,14.0836,54.8507,180.677,719.62)),((1.31933,4.08992,15.2492,58.2131,229.476),(1.36675,4.52352,17.1544,60.2594,239.771),(2.16099,7.61306,24.4188,96.6934,384.76),(3.71773,14.01,45.4314,180.374,870.639))))

#new results with fixed measurements
results = np.array((((3.59834,9.19757,33.1684,127.328,448.651),(3.39763,9.75667,35.9813,135.926,536.228),(5.0217,13.5741,49.5892,189.608,697.682),(8.52685,21.9146,75.008,286.792,1013.66)),((3.08429,8.76544,32.0891,124.648,450.704),(3.85331,10.2994,36.0161,139.521,515.95),(4.96026,13.1738,51.1683,180.867,647.253),(8.28723,20.2445,74.2687,251.737,1012.23)),((3.51232,9.06445,31.4501,126.985,459.484),(3.71302,9.94611,35.4877,138.138,520.238),(5.78765,13.3519,49.3742,166.146,657.022),(8.42547,21.5818,67.8113,257.679,1019.64)),((3.7591,9.7495,34.6644,131.775,519.626),(3.70278,10.197,37.2111,135.264,544.286),(4.64077,13.9889,43.4862,168.244,661.268),(7.3769,20.0325,66.7177,251.806,847.307))))

results =  np.array((((3.86048,9.17094,32.8141,130.257,477.548),(3.3536,9.09312,33.0557,129.058,507.116),(4.40422,12.0484,43.1923,164.271,638.904),(7.84486,18.5795,62.977,246.41,990.295)),((3.44986,8.44902,32.4731,123.642,487.217),(3.25325,8.94566,33.2524,130.691,519.681),(4.30899,11.775,43.8825,163.618,651.038),(7.97491,17.749,66.3142,247.163,1001.07)),((3.21536,8.68864,32.1362,124.136,498.788),(3.40275,9.9287,33.3568,130.85,525.222),(4.14106,11.9552,43.6347,163.984,652.108),(7.61754,17.8217,64.8489,247.533,1018.16)),((3.39149,9.23853,33.6753,129.418,521.274),(3.43757,9.67373,35.7038,136.038,553.64),(4.31206,12.2399,44.4856,166.516,658.026),(7.85715,18.3767,65.0885,246.655,679.391))))


#divide by 10 because we measured 10 times

sbpltNbmr = np.shape(bArray)[0]
rubbish, sbplts = plt.subplots(2, 2, sharex='all', sharey='all') #(sbpltNbmr)
for i in range(sbpltNbmr):
    plotNumber = i
        
    sbplts.flatten()[plotNumber].set_title("Anzahl Bloecke: " + str(bArray[i]))
    
    for lines in range(0, np.shape(results)[0]):
    
        sbplts.flatten()[plotNumber].plot(xaxis, results[lines, plotNumber, :], label = "Anzahl Threads = " + str(tArray[lines]))
        sbplts.flatten()[plotNumber].scatter(xaxis, results[lines, plotNumber, :])
            #plt.axis.Tick
        sbplts.flatten()[plotNumber].grid(linestyle='-')
        if plotNumber %2 == 1:
            sbplts.flatten()[plotNumber].legend(bbox_to_anchor=(1.05,1), loc = 2)
       # sbplts[plotNumber].set_title("N =" + str((2 ** plotNumber) * 8))
       
plt.xlabel("Ergebnisse pro Block")
plt.ylabel("Zeit in MS")
plt.savefig('fig.svg', format='svg', bbox_inches='tight')
